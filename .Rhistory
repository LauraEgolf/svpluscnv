agglist[[cnum]] <- unique(c(x,prev))
prev <- agglist[[cnum]]
}else{
cnum <- cnum+1
agglist[[cnum]]<- x
prev <-agglist[[cnum]]
}
}
agglistUniq <- list()
for(i in 1:length(agglist)){
chrom <- as.character(unique(tab[as.numeric(agglist[[i]]),"chrom"]))
start<-min( tab[as.numeric(agglist[[i]]),"start"])
end<-max( tab[as.numeric(agglist[[i]]),"end"])
segNum <- length(agglist[[i]])
agglistUniq[[i]] <-  c(chrom,start,end,segNum)
}
tabmerged <- remove.factors(as.data.frame(do.call(rbind,agglistUniq)))
for(i in 2:4) tabmerged[,i] <- as.numeric( tabmerged[,i] )
colnames(tabmerged) <- c("chrom","start","end","nseg")
restab[[cl]] <- tabmerged
}
}
if(verbose) close(pb)
results <- list(
regions.summary = restab,
high.density.regions = highDensityRegions,
seg.brk.dens = segbrk.dens,
sv.brk.dens = svbrk.dens,
seg.brk.common.dens = segbrk.common.dens,
sv.brk.common.dens = svbrk.common.dens,
segbrk = segbrk,
svbrk = svbrk,
common.brk = common.brk,
segdat = segdat,
svdat = svdat
)
results_eval <- shattered.eval(results, interleaved.cut = interleaved.cut, dist.iqm.cut = dist.iqm.cut, verbose = verbose)
results_eval
bins <- remove.factors(data.frame(do.call(rbind,strsplit(colnames(highDensityRegions)," "))))
bins[,2] <- as.numeric( bins[,2])
bins[,3] <- as.numeric( bins[,3])
rownames(bins) <- colnames(highDensityRegions)
binsGR <- with(bins, GRanges(X1, IRanges(start=X2, end=X3)))
highDensityRegionsHC <- highDensityRegions
for(cl in names(results_eval$regions.summary)){
lc <- results_eval$regions.summary[[cl]][which(results_eval$regions.summary[[cl]]$conf == "lc"),]
if(nrow(lc) > 0){
lcGR<- with(lc, GRanges(chrom, IRanges(start=start, end=end)))
hits = GenomicAlignments::findOverlaps(binsGR,lcGR)
highDensityRegionsHC[cl,rownames(bins[unique(queryHits(hits)),])] <- 0
}
}
results_eval[["high.density.regions.hc"]] <- highDensityRegionsHC
require(taRifx,quietly = TRUE,warn.conflicts = FALSE)  # contains remove.factors
require(GenomicRanges,quietly = TRUE,warn.conflicts = FALSE)
segdat <- validate.seg(seg)
chr.lim <- chromosome.limit.coords(segdat)
breaks <- seg.breaks(seg = segdat,
fc.pct = fc.pct,
min.seg.size = min.seg.size,
low.cov = low.cov,
clean.brk=clean.brk,
verbose = verbose)
if(verbose) message("Mapping CNV breakpoints across the genome:")
seg.brk.dens <- break.density(breaks,
chr.lim = chr.lim,
window.size = window.size,
slide.size = slide.size,
verbose = verbose)
# calculate inter quantile mean and standard deviation per sample
iqmdata <- apply(seg.brk.dens,1,IQM,lowQ=0.2,upQ=0.8)
sddata <- apply(seg.brk.dens,1,IQSD,lowQ=0.2,upQ=0.8)
breaks
breaks
iqmdata1<- sddata<- breaks$brk.burden
iqmdata1[] <- sddata[] <- 0
iqmdata1
sddata
iqmdata <- apply(seg.brk.dens,1,IQM,lowQ=0.2,upQ=0.8)
sddata <- apply(seg.brk.dens,1,IQSD,lowQ=0.2,upQ=0.8)
a <- sapply(rownames(seg.brk.dens),function(i) names(which(seg.brk.dens[i,] > iqmdata[i]+num.sd*sddata[i] )))
num.breaks = 10
num.sd = 5
dist.iqm.cut = 1e+05
a <- sapply(rownames(seg.brk.dens),function(i) names(which(seg.brk.dens[i,] > iqmdata[i]+num.sd*sddata[i] )))
b <- sapply(rownames(seg.brk.dens),function(i) names(which(seg.brk.dens[i,] >= num.breaks)))
# condition for chromothripsis: at least n=breaks > 6 (sv SND seg)  AND n-breaks > u+2*sd (sv AND seg)
res <- sapply(rownames(seg.brk.dens),function(i) Reduce(intersect, list(b[[i]],a[[i]])) )
highDensityRegions <- seg.brk.dens
highDensityRegions[] <- 0
for(cl in rownames(seg.brk.dens)) highDensityRegions[cl,res[[cl]]] <- 1
res <- res[which(unlist(lapply(res,length)) >0)]
if(verbose){
message("Locating shattered regions by CNV only...")
pb <- txtProgressBar(style=3)
cc <-0
tot <- length(res)
}
restab <- list()
for(cl in names(res)){
if(verbose) cc <- cc+1
if(verbose) setTxtProgressBar(pb, cc/tot)
if(length(res[[cl]]) > 0){
tab <- as.data.frame(do.call(rbind,strsplit(res[[cl]]," ")))
tab[,2]<-as.numeric(as.character(tab[,2]))
tab[,3]<-as.numeric(as.character(tab[,3]))
colnames(tab) <- c("chrom","start","end")
tabgr = with(tab, GRanges(chrom, IRanges(start=start, end=end)))
hits = as.data.frame(GenomicAlignments::findOverlaps(tabgr,tabgr))
agg <- aggregate(subjectHits ~ queryHits, hits, paste,simplify=FALSE)
prev<-c(); cnum <- 0
agglist <- list()
for(x in agg$subjectHits){
if(length(intersect(x,prev) > 0)){
agglist[[cnum]] <- unique(c(x,prev))
prev <- agglist[[cnum]]
}else{
cnum <- cnum+1
agglist[[cnum]]<- x
prev <-agglist[[cnum]]
}
}
agglistUniq <- list()
for(i in 1:length(agglist)){
chr <- as.character(unique(tab[as.numeric(agglist[[i]]),"chrom"]))
start <-min( tab[as.numeric(agglist[[i]]),"start"])
end <- max( tab[as.numeric(agglist[[i]]),"end"])
segNum <- length(agglist[[i]])
agglistUniq[[i]] <-  c(chr,start,end,segNum)
}
tabmerged <- remove.factors(as.data.frame(do.call(rbind,agglistUniq)))
for(i in 2:4) tabmerged[,i] <- as.numeric( tabmerged[,i] )
colnames(tabmerged) <- c("chrom","start","end","nseg")
restab[[cl]] <- tabmerged
}
}
if(verbose) close(pb)
if(verbose){
message("Evaluating shattered regions by CNV data only...")
pb <- txtProgressBar(style=3)
cc <-0
tot <- length(restab)
}
for(cl in names(restab)){
if(verbose) cc <- cc+1
if(verbose) setTxtProgressBar(pb, cc/tot)
regions <-   restab[[cl]]
br1 <- breaks[which(breaks$sample == cl),2:3]
colnames(br1) <- c("chrom","pos")
br1.gr <- with(br1, GRanges(chrom, IRanges(start=pos, end=pos)))
regions_gr <- with(regions, GRanges(chrom, IRanges(start=start, end=end)))
hits_1 = GenomicAlignments::findOverlaps(regions_gr,br1.gr)
n.brk <- dist.iqm <- start <- end <- rep(0,nrow(regions))
conf <- rep("HC",nrow(regions))
for(i in 1:nrow(regions)){
sites <- sort(unique(br1[subjectHits(hits_1)[which(queryHits(hits_1) == i)],"pos"]))
dist.iqm[i]  <- IQM(sites[2:length(sites)] - sites[1:(length(sites)-1) ],lowQ = 0.2,upQ = 0.8)
n.brk[i] <- length(sites)
start[i] <- min(sites)
end[i] <- max(sites)
}
conf[which(dist.iqm < dist.iqm.cut )] <-"lc"
chrom <- regions$chrom
nseg <- regions$nseg
restab[[cl]] <- data.frame(chrom,start,end,nseg,dist.iqm,n.brk,conf)
}
for(cl in names(restab)){
if(verbose) cc <- cc+1
if(verbose) setTxtProgressBar(pb, cc/tot)
regions <-   restab[[cl]]
br1 <- breaks$breaks[which(breaks$breaks$sample == cl),2:3]
colnames(br1) <- c("chrom","pos")
br1.gr <- with(br1, GRanges(chrom, IRanges(start=pos, end=pos)))
regions_gr <- with(regions, GRanges(chrom, IRanges(start=start, end=end)))
hits_1 = GenomicAlignments::findOverlaps(regions_gr,br1.gr)
n.brk <- dist.iqm <- start <- end <- rep(0,nrow(regions))
conf <- rep("HC",nrow(regions))
for(i in 1:nrow(regions)){
sites <- sort(unique(br1[subjectHits(hits_1)[which(queryHits(hits_1) == i)],"pos"]))
dist.iqm[i]  <- IQM(sites[2:length(sites)] - sites[1:(length(sites)-1) ],lowQ = 0.2,upQ = 0.8)
n.brk[i] <- length(sites)
start[i] <- min(sites)
end[i] <- max(sites)
}
conf[which(dist.iqm < dist.iqm.cut )] <-"lc"
chrom <- regions$chrom
nseg <- regions$nseg
restab[[cl]] <- data.frame(chrom,start,end,nseg,dist.iqm,n.brk,conf)
}
if(verbose) close(pb)
bins <- remove.factors(data.frame(do.call(rbind,strsplit(colnames(highDensityRegions)," "))))
bins[,2] <- as.numeric( bins[,2])
bins[,3] <- as.numeric( bins[,3])
rownames(bins) <- colnames(highDensityRegions)
binsGR <- with(bins, GRanges(X1, IRanges(start=X2, end=X3)))
highDensityRegionsHC <- highDensityRegions
for(cl in names(restab)){
lc <- restab[[cl]][which(restab[[cl]]$conf == "lc"),]
if(nrow(lc) > 0){
lcGR<- with(lc, GRanges(chrom, IRanges(start=start, end=end)))
hits = GenomicAlignments::findOverlaps(binsGR,lcGR)
highDensityRegionsHC[cl,rownames(bins[unique(queryHits(hits)),])] <- 0
}
}
return(list(
regions.summary = restab,
high.density.regions = highDensityRegions,
high.density.regions.hc = highDensityRegionsHC,
seg.brk.dens=seg.brk.dens,
segbrk = breaks,
segdat = segdat
))
library(svcnvplus)
library(svcnvplus)
library(svcnvplus)
library(svcnvplus)
?recurrent.regions.plot
?shattered.regions
plot(1,1,cex=5,col=rgb(0.1,0.1,0.1,alpha=0.1))
plot(1,1,cex=5,col=rgb(0.1,0.1,0.1,alpha=0.1),pch=19)
plot(1,1,cex=5,col=rgb(0.8,0.8,0.8,alpha=0.1),pch=19)
plot(1,1,cex=5,col=rgb(0.8,0.8,0.8,alpha=1),pch=19)
plot(1,1,cex=5,col=rgb(0.1,0.1,0.1,alpha=1),pch=19)
plot(1,1,cex=5,col=rgb(0.4,0.4,0.4,alpha=1),pch=19)
plot(1,1,cex=5,col=salmon3,pch=19)
plot(1,1,cex=5,col="salmon3"",pch=19)
plot(1,1,cex=5,col="salmon3",pch=19)
plot(1,1,cex=5,col="salmon1",pch=19)
plot(1,1,cex=5,col="salmon4",pch=19)
plot(1,1,cex=5,col="salmon",pch=19)
plot(1,1,cex=5,col="salmon4",pch=19)
shattered.map.plot <- function(shatt_regs,
conf="hc",
hg= "hg19",
fdr_cut=NULL){
require(D3GB,quietly = TRUE,warn.conflicts = FALSE)
require(taRifx,quietly = TRUE,warn.conflicts = FALSE)
require(tidyr,quietly = TRUE,warn.conflicts = FALSE)
if(hg == "hg19"){ bands <- remove.factors(GRCh37.bands)
}else if(hg=="h38"){ bands <- remove.factors(GRCh38.bands)}
centromeres <- bands[intersect(which(bands$score == "acen"),grep("q",bands$name)),"start"]
names(centromeres) <- paste("chr",bands[intersect(which(bands$score == "acen"),grep("q",bands$name)),"chr"],sep="")
chrlengths <- vapply(unique(bands$chr), function(i) max(bands$end[which(bands$chr == i)]), 1)
names(chrlengths) <- paste("chr",names(chrlengths),sep="")
chrlist <- unique(do.call(rbind,strsplit(colnames(shatt_regs$high.density.regions)," "))[,1])
stopifnot( length(which(!chrlist %in% names(chrlengths))) == 0 )
if(conf == "hc") {
highDensitiRegionsFreq <- apply(shatt_regs$high.density.regions.hc,2,sum)
}else{
highDensitiRegionsFreq <- apply(shatt_regs$high.density.regions,2,sum)
}
p_chrcols  <- rep(c("salmon4","salmon4"),12)
q_chrcols  <- rep(c("salmon","salmon"),12)
names(p_chrcols) <- names(q_chrcols) <- chrlist
chrom <- do.call(rbind,strsplit(names(highDensitiRegionsFreq)," "))[,1]
coloresBarplot  <- rep("white",length(chrom))
parm <- which(as.numeric(do.call(rbind,strsplit(names(highDensitiRegionsFreq)," "))[,3]) - centromeres[chrom] > 0)
qarm <- which(as.numeric(do.call(rbind,strsplit(names(highDensitiRegionsFreq)," "))[,2]) - centromeres[chrom] < 0)
coloresBarplot[parm] <- p_chrcols[names(parm)]
coloresBarplot[qarm] <- q_chrcols[names(qarm)]
axislab <- chrstarts<-  chrend <- chrlengths[chrlist]
tab <- remove.factors(data.frame(do.call(rbind,strsplit(names(highDensitiRegionsFreq)," "))))
tab[,2] <-as.numeric(tab[,2])
tab[,3] <-as.numeric(tab[,3])
for(i in unique(tab[,1])) chrend[i] <- max(tab[which(tab[,1] == i),3])
for(i in 0:(length(chrend)-1) ) axislab[i+1] <- chrend[i+1]/2 + sum( chrend[0:i])
for(i in 0:(length(chrend)-1) ) chrstarts[i+1] <- sum(chrend[0:i])
data <- cbind( (tab[,3] + tab[,2]) / 2 + chrstarts[tab[,1]], highDensitiRegionsFreq)
altcols <- rep(c(rgb(0.1,0.1,0.1,alpha=0.1),rgb(0.8,0.8,0.8,alpha=0.1)),12)
altcols2<- rep(c(rgb(0.1,0.1,0.1,alpha=1),rgb(0.4,0.4,0.4,alpha=1)),12)
ctrmr <- chrstarts+centromeres[names(chrstarts)]
par(mar=c(3,4,3,4))
plot(data[,1:2],type='h',col=coloresBarplot,xaxt='n',lwd=1.5,ylim=c(0, max(data[,2])+5),
las=1,bty='n',yaxt='n',family="Arial",ylab="",xlab="")
for(i in 1:length(chrstarts) ) rect( chrstarts[i],0,chrstarts[i]+chrlengths[i],1000, col=altcols[i],border=NA )
mtext(gsub("chr","",names(axislab)),side=3,at=axislab,las=1,col=altcols2,cex=c(rep(1,17),rep(0.8,5),1) )
if(fdr_cut) lines(c(0,chrstarts["chrX"]+chrlengths["chrX"]),c(fdr_cut,fdr_cut),lty=3,col="lightgrey")
axis(2,las=1,pos= 0, cex=1.2)
axis(4,las=1,pos= max(data[,1])+10000, cex=1.2, at=axTicks(2), labels=sprintf("%.2f",axTicks(2)/dim(shatt_regs$high.density.regions)[1]) )
mtext("Frequency",side=4,line=1)
mtext("#samples",side=2,line=1)
}
library(svcnvplus)
add.legend<-"topleft"
if(!is.null(add.legend)) legend(add.legend,c("short (p) arm","long (q) arm"),fill=c("salmon","salmon4"))
if(!is.null(add.legend)) legend(add.legend,c("short (p) arm","long (q) arm"),fill=c("salmon","salmon4"),bty='n',ncol=2)
library(svcnvplus)
library(svcnvplus)
library(svcnvplus)
library(svcnvplus)
svdf
sv_breaks  <- sv.breaks(svdf)  # define breakpoints from SV data
sv_burden <- table(sv_breaks_df$breaks$sample)
seg_breaks  <- seg.breaks(segdf,fc.pct = 0.2,verbose=FALSE)  # define breakpoints from seg data based on certain CNV change cutoff
seg_burden <- table(seg_breaks_df$breaks$sample)
sv_breaks  <- sv.breaks(svdf)  # define breakpoints from SV data
sv_burden <- table(sv_breaks$breaks$sample)
cnv_breaks  <- seg.breaks(segdf,fc.pct = 0.2,verbose=FALSE)  # define breakpoints from seg data based on certain CNV change cutoff
cnv_burden <- table(cnv_breaks$breaks$sample)
common_samples <- intersect(names(sv_burden),names(seg_burden))
sv_breaks  <- sv.breaks(svdf)  # define breakpoints from SV data
sv_burden <- table(sv_breaks$breaks$sample)
cnv_breaks  <- seg.breaks(segdf,fc.pct = 0.2,verbose=FALSE)  # define breakpoints from seg data based on certain CNV change cutoff
cnv_burden <- table(cnv_breaks$breaks$sample)
common_samples <- intersect(names(sv_burden),names(cnv_burden))
dat <- cbind(sv_burden[common_samples],cnv_burden[common_samples])
plot(dat,xlab="SV burden",ylab="CNV breakpoint burden")
legend("topright",paste("cor=",cor(dat)[1,2], sep=""))
sv_breaks  <- sv.breaks(svdf)  # define breakpoints from SV data
sv_burden <- table(sv_breaks$breaks$sample)
cnv_breaks  <- seg.breaks(segdf,fc.pct = 0.2,verbose=FALSE)  # define breakpoints from seg data based on certain CNV change cutoff
cnv_burden <- table(cnv_breaks$breaks$sample)
common_samples <- intersect(names(sv_burden),names(cnv_burden))
dat <- cbind(sv_burden[common_samples],cnv_burden[common_samples])
plot(dat,xlab="SV burden",ylab="CNV breakpoint burden")
legend("topright",paste("cor=",cor(dat)[1,2], sep=""))
min(sv_burden)
sv_burden
cnv_burden
min(cnv_burden)
knitr::opts_chunk$set(echo = TRUE)
dat <- log2(1+cbind(sv_burden[common_samples],cnv_burden[common_samples]))
dat <- log2(1+cbind(sv_burden[common_samples],cnv_burden[common_samples]))
plot(dat,xlab="SV burden",ylab="CNV breakpoint burden")
legend("topright",paste("cor=",cor(dat)[1,2], sep=""))
sv_breaks
segdf <- validate.seg(segdat_lung_ccle)
svdf <- validate.sv(svdat_lung_ccle)
sv_breaks  <- sv.breaks(svdf)  # define breakpoints from SV data
sv_burden <- table(sv_breaks$breaks$sample)
cnv_breaks  <- seg.breaks(segdf,fc.pct = 0.2,verbose=FALSE)  # define breakpoints from seg data based on certain CNV change cutoff
cnv_burden <- table(cnv_breaks$breaks$sample)
common_samples <- intersect(names(sv_burden),names(cnv_burden))
dat <- log2(1+cbind(sv_burden[common_samples],cnv_burden[common_samples]))
plot(dat,xlab="SV burden",ylab="CNV breakpoint burden")
legend("topright",paste("cor=",cor(dat)[1,2], sep=""))
common.breaks <- match.variant.breaks(segdf,svdf,maxgap=50000,low.cov = NULL,verbose=FALSE)
common.breaks <- match.variant.breaks(segdf,svdf,maxgap=50000,low.cov = NULL,verbose=FALSE)
library(svcnvplus)
sv_ranges
library(svcnvplus)
knitr::opts_chunk$set(echo = TRUE)
common.breaks <- match.variant.breaks(segdf,svdf,maxgap=50000,low.cov = NULL,verbose=FALSE)
common.breaks <- match.variant.breaks(segdf,svdf,maxgap=50000,low.cov = NULL,verbose=FALSE)
sv_breaks  <- sv.breaks(svdf)  # define breakpoints from SV data
cnv_breaks  <- seg.breaks(segdf,low.cov = cnv_blacklist_regions ,fc.pct = 0.2,verbose=FALSE)  # define breakpoints from seg data based on certain CNV change cutoff
cnv_breaks
cnv_breaks  <- seg.breaks(segdf,low.cov = cnv_blacklist_regions, clean.brk = 6,min.num.probes = 3, fc.pct = 0.2,verbose=FALSE)  # define breakpoints from seg data based on certain CNV change cutoff
cnv_breaks
sv_breaks
common.breaks <- match.breaks(cnv_breaks,sv_breaks,maxgap=50000,verbose=FALSE)
restab <- data.frame(common.breaks$restab)[order(common.breaks$restab$total.sv),]
common.breaks$restab
head(common.breaks$restab)
restab <- data.frame(common.breaks$restab)[order(common.breaks$restab$total.brk2),]
restab
head(common.breaks$restab)
restab <- data.frame(common.breaks$restab)[order(common.breaks$restab$total.brk2),]
m2 <- sprintf("%.1f",100*mean(restab$matched.brk2/restab$total.brk2))
barplot(rbind(restab$matched.brk2,restab$total.brk2 - restab$matched.brk2),
border=NA,las=2,xlab="",horiz=FALSE,cex.main=.7,cex.names=.4, names=rownames(restab))
legend("top",paste("SV breaks matched by CNV breaks\n","Average = ",m2,"%",sep=""),bty='n')
grid(ny=NULL,nx=NA)
sv_breaks  <- sv.breaks(svdf)
# define breakpoints from seg data based on certain CNV change cutoff
cnv_breaks  <- seg.breaks(segdf,low.cov = cnv_blacklist_regions, clean.brk = 6,min.num.probes = 3, fc.pct = 0.2,verbose=FALSE)
# identify colocalizing breakpoints
common.breaks <- match.breaks(cnv_breaks,sv_breaks,maxgap=50000,verbose=FALSE)
# Plot the proportion of SV breakpoints that have colocalizing CNV breakpoints
restab <- data.frame(common.breaks$restab)[order(common.breaks$restab$total.brk2),]
m2 <- sprintf("%.1f",100*mean(restab$matched.brk2/restab$total.brk2))
barplot(rbind(restab$matched.brk2,restab$total.brk2 - restab$matched.brk2),
border=NA,las=2,xlab="",horiz=FALSE,cex.main=.7,cex.names=.4, names=rownames(restab))
legend("top",paste("SV breaks matched by CNV breaks\n","Average = ",m2,"%",sep=""),bty='n')
grid(ny=NULL,nx=NA)
library(svcnvplus)
results_cnv <- cnv.break.annot(nbl_segdat, fc.pct = 0.2, genome.v="hg19",clean.brk = 8,upstr = 50000,verbose=FALSE)
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
genes
results_cnv <- cnv.break.annot(nbl_segdat, fc.pct = 0.2, genome.v="hg19",clean.brk = 8,upstr = 50000,verbose=FALSE)
library(svcnvplus)
require(org.Hs.eg.db)
library(svcnvplus)
results_cnv <- cnv.break.annot(nbl_segdat, fc.pct = 0.2, genome.v="hg19",clean.brk = 8,upstr = 50000,verbose=FALSE)
library(svcnvplus)
results_cnv <- cnv.break.annot(nbl_segdat, fc.pct = 0.2, genome.v="hg19",clean.brk = 8,upstr = 50000,verbose=FALSE)
results_cnv
library(svcnvplus)
segdf
shatt_lung <- shattered.regions(segdf, svdf, fc.pct = 0.2,  min.num.probes = 5, clean.brk = 8,
window.size = 10,slide.size = 2, num.seg.breaks = 6,
num.seg.sd = 5, num.sv.breaks = 6, num.sv.sd = 5,
num.common.breaks = 3, num.common.sd = 0, interleaved.cut = 0.33,
dist.iqm.cut = 100000,verbose=FALSE)
shatt_lung$regions.summary$SCLC21H_LUNG
shatt_lung <- shattered.regions(segdf, svdf, fc.pct = 0.2,  min.num.probes = 5, clean.brk = 8,
window.size = 10,slide.size = 2, num.seg.breaks = 6,
num.seg.sd = 5, num.sv.breaks = 6, num.sv.sd = 5,
num.common.breaks = 3, num.common.sd = 0, interleaved.cut = 0.5,
dist.iqm.cut = 100000,verbose=FALSE)
shatt_lung$regions.summary$SCLC21H_LUNG
shatt_lung$regions.summary
circ.chromo.plot(shatt_lung,sample.id = "SW900_LUNG")
circ.chromo.plot(shatt_lung,sample.id = "PC14_LUNG")
\
circ.chromo.plot(shatt_lung,sample.id = "NCIH841_LUNG")
circ.chromo.plot(shatt_lung,sample.id = "NCIH522_LUNG")
par(mfrow=c(1,2))
circ.chromo.plot(shatt_lung,sample.id = "SCLC21H_LUNG")
circ.chromo.plot(shatt_lung,sample.id = "NCIH522_LUNG")
library(svcnvplus)
segdf <- validate.seg(nbl_segdat)
svdf <- validate.sv(nbl_svdat)
shatt_lung <- shattered.regions(segdf, svdf, fc.pct = 0.2,  min.num.probes = 5, clean.brk = 8,
window.size = 10, slide.size = 2, num.seg.breaks = 6,
num.seg.sd = 5, num.sv.breaks = 6, num.sv.sd = 5,
num.common.breaks = 2, num.common.sd = 0, interleaved.cut = 0.5,
dist.iqm.cut = 100000,verbose=FALSE)
par(mfrow=c(1,2))
circ.chromo.plot(shatt_lung,sample.id = "SCLC21H_LUNG")
circ.chromo.plot(shatt_lung,sample.id = "NCIH522_LUNG")
shatt_lung$regions.summary
shatt_lung$regions.summary
segdf <- validate.seg(segdat_lung_ccle)
svdf <- validate.sv(svdat_lung_ccle)
shatt_lung_cnv <- shattered.regions.cnv(segdf, fc.pct = 0.2, clean.brk = 4, window.size = 10,
slide.size = 2,num.breaks = 8, num.sd = 5,
dist.iqm.cut = 150000,verbose=FALSE)
shatt_lung <- shattered.regions(segdf, svdf, fc.pct = 0.2,  min.num.probes = 5, clean.brk = 8,
window.size = 10, slide.size = 2, num.seg.breaks = 6,
num.seg.sd = 5, num.sv.breaks = 6, num.sv.sd = 5,
num.common.breaks = 2, num.common.sd = 0, interleaved.cut = 0.5,
dist.iqm.cut = 100000,verbose=FALSE)
library(svcnvplus)
segdat <- validate.seg(seg)
svdat <- validate.seg(sv)
chrlist <- unique(segdat$chrom)
require(org.Hs.eg.db)
if(genome.v %in% c("hg19","GRCh37")){
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
genesgr = genes(TxDb.Hsapiens.UCSC.hg19.knownGene)
}else if(genome.v %in% c("hg38","GRCh38")){
require(TxDb.Hsapiens.UCSC.hg38.knownGene)
genesgr = genes(TxDb.Hsapiens.UCSC.hg38.knownGene)
}else{stop("Unspecified, or non available genome")}
sv<-nbl_svdat
seg<-nbl_segdat
segdat <- validate.seg(seg)
svdat <- validate.seg(sv)
chrlist <- unique(segdat$chrom)
require(org.Hs.eg.db)
segdat <- validate.seg(seg)
svdat <- validate.seg(sv)
chrlist <- unique(segdat$chrom)
require(org.Hs.eg.db)
segdat <- validate.seg(seg)
svdat <- validate.seg(sv)
chrlist <- unique(segdat$chrom)
require(org.Hs.eg.db)
segdat <- validate.seg(seg)
svdat <- validate.seg(sv)
require(org.Hs.eg.db)
if(genome.v %in% c("hg19","GRCh37")){
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
genesgr = genes(TxDb.Hsapiens.UCSC.hg19.knownGene)
}else if(genome.v %in% c("hg38","GRCh38")){
require(TxDb.Hsapiens.UCSC.hg38.knownGene)
genesgr = genes(TxDb.Hsapiens.UCSC.hg38.knownGene)
}else{stop("Unspecified, or non available genome")}
genome.v="hg19"
verbose=TRUE
source('~/.active-rstudio-document', echo=TRUE)
grange=NULL
dnstream=10000
upstream=50000
symbol=NULL
genesgr
segdat <- validate.seg(seg)
svdat <- validate.seg(sv)
require(org.Hs.eg.db)
if(genome.v %in% c("hg19","GRCh37")){
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
genesgr = genes(TxDb.Hsapiens.UCSC.hg19.knownGene)
}else if(genome.v %in% c("hg38","GRCh38")){
require(TxDb.Hsapiens.UCSC.hg38.knownGene)
genesgr = genes(TxDb.Hsapiens.UCSC.hg38.knownGene)
}else{stop("Unspecified, or non available genome")}
genesgr
genesgr = genesgr[which(as.character(genesgr@seqnames) %in% chrlist)]
genesgr@elementMetadata$SYMBOL <- mapIds(org.Hs.eg.db, genesgr@elementMetadata$gene_id,  'SYMBOL','ENTREZID')
genesgr
segdat <- validate.seg(seg)
svdat <- validate.seg(sv)
require(org.Hs.eg.db)
if(genome.v %in% c("hg19","GRCh37")){
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
genesgr = genes(TxDb.Hsapiens.UCSC.hg19.knownGene)
}else if(genome.v %in% c("hg38","GRCh38")){
require(TxDb.Hsapiens.UCSC.hg38.knownGene)
genesgr = genes(TxDb.Hsapiens.UCSC.hg38.knownGene)
}else{stop("Unspecified, or non available genome")}
genesgr = genesgr[which(as.character(genesgr@seqnames) %in% chrlist)]
genesgr@elementMetadata$SYMBOL <- mapIds(org.Hs.eg.db, genesgr@elementMetadata$gene_id,  'SYMBOL','ENTREZID')
symbol %in%  genesgr@elementMetadata$SYMBOL
symbol
seg<- nbl_segdat
sv <- nbl_svdat
symbol = "ATRX"
symbol %in%  genesgr@elementMetadata$SYMBOL
stopifnot(symbol %in%  genesgr@elementMetadata$SYMBOL)
results_cnv <- cnv.break.annot(nbl_segdat, fc.pct = 0.2, genome.v="hg19",clean.brk = 8,upstr = 50000,verbose=FALSE)
results_cnv
